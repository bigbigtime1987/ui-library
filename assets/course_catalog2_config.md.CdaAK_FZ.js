import{_ as i,c as a,b as t,o as n}from"./chunks/framework.DegHhALb.js";const l="/assets/config.B4-sKJUf.mp4",c=JSON.parse('{"title":"参数配置","description":"","frontmatter":{},"headers":[],"relativePath":"course/catalog2/config.md","filePath":"course/catalog2/config.md"}'),h={name:"course/catalog2/config.md"};function e(p,s,k,d,r,E){return n(),a("div",null,s[0]||(s[0]=[t('<h1 id="参数配置" tabindex="-1">参数配置 <a class="header-anchor" href="#参数配置" aria-label="Permalink to &quot;参数配置&quot;">​</a></h1><p>参数配置为系统的灵活性、可用性和安全性提供了重要支持。</p><h1 id="特点用途" tabindex="-1">特点用途 <a class="header-anchor" href="#特点用途" aria-label="Permalink to &quot;特点用途&quot;">​</a></h1><p>功能定制：不同的应用场景可能需要不同的功能，参数配置允许用户根据自己的需求启用、禁用或其他特定功能。 可维护性：合理的参数配置使系统更易于理解和维护，帮助开发者快速定位和解决问题。 全局规范：多场景使用相同交互模式，渲染布局不同。</p><h1 id="业务场景示例一" tabindex="-1">业务场景示例一 <a class="header-anchor" href="#业务场景示例一" aria-label="Permalink to &quot;业务场景示例一&quot;">​</a></h1><video width="800" controls><source src="'+l+`" type="video/mp4"></video><table tabindex="0"><thead><tr><th>序号</th><th>字段</th><th>交互</th></tr></thead><tbody><tr><td>1</td><td>选项类型</td><td>单选：下拉显示全部类型。若选择的类型为<code>四</code>或<code>五</code>，则无进程项目、进程方案字段。</td></tr><tr><td>2</td><td>进程项目</td><td>复选：下拉显示全部项目，已启用的项目可选，已禁用的项目禁选。</td></tr><tr><td>3</td><td>数量</td><td>复选：下拉显示全部项目，已启用的项目可选，已禁用的项目禁选。</td></tr><tr><td>4</td><td>进程方式</td><td>单选：线上、线下、混合。选项不同，对应的进程时间字段不同。<br>线上：进程时间(线上)；<br>线下：进程时间(线下)；<br>混合：进程时间(线上)+进程时间(线下)</td></tr><tr><td>5</td><td>进程方案</td><td>复选：下拉显示全部项目。</td></tr><tr><td>6</td><td>区域</td><td>选择的<code>选项类型</code>若为<code>三</code>，且<code>进程方式</code>为<code>线下</code>或<code>混合</code>，则显示此字段。</td></tr><tr><td>7</td><td>是否独立性</td><td>选择的<code>选项类型</code>若为<code>三</code>，显示此字段。</td></tr></tbody></table><h1 id="思考一下" tabindex="-1">思考一下 <a class="header-anchor" href="#思考一下" aria-label="Permalink to &quot;思考一下&quot;">​</a></h1><p><strong>根据上述的交互需求，你会选择什么方式实现？使用<code>if</code>条件判断？还是<code>参数配置</code>模式？</strong><br> 当然还要思考数据渲染页面。上述仅是提交表单数据，数据渲染也是相同的规则。</p><h1 id="怎么实现会更好" tabindex="-1">怎么实现会更好 <a class="header-anchor" href="#怎么实现会更好" aria-label="Permalink to &quot;怎么实现会更好&quot;">​</a></h1><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-jiJ9y" id="tab-NhCeZQo" checked><label data-title="if" for="tab-NhCeZQo">if</label><input type="radio" name="group-jiJ9y" id="tab-Jl1hYCB"><label data-title="参数配置" for="tab-Jl1hYCB">参数配置</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/***</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 使用\`if\`条件？</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/***</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 自定义参数配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> optionsType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;进程选项一&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, belongingProject: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;进程选项二&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, belongingProject: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;进程选项三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, belongingProject: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;进程选项四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;进程选项五&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">字段</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`belongingProject\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">是自定义的，对应选择</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`进程选项一\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，从而达到不同类型的选项与其他控件交互。不理解？看视频</span></span></code></pre></div></div></div><h1 id="主题的配置" tabindex="-1">主题的配置 <a class="header-anchor" href="#主题的配置" aria-label="Permalink to &quot;主题的配置&quot;">​</a></h1><p>当然还有<code>按钮</code>、<code>标签</code>的不同配置。</p>`,13)]))}const g=i(h,[["render",e]]);export{c as __pageData,g as default};
